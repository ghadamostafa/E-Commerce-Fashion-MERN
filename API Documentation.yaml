swagger: "2.0"
info:
  description: "online fashion e-commerce application where users
explore categories & subcategories of clothes, shoes & accessories where users
can add to cart and checkout the cart with the invoice."
  version: "1.0.0"
  title: "E-Commerce Fashion"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "ghadamostafa28@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "products"
  description: "Operations about products"

- name: "categories"
  description: "Operations about categories"
  
- name: "users"
  description: "Operations about user"
  
- name: "tags"
  description: "Operations about tags"

- name: "orders"
  description: "Operations about orders"

schemes:
- "https"
- "http"
paths:
#products
  /admin/products/{productSlug}:
    put:
      tags:
      - "products"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      parameters:
      - name: "productSlug"
        in: "path"
        description: "Slug of product to update"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "products"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productSlug"
        in: "path"
        description: "Slug of product to delete"
        required: true
        type: "string"

      responses:
        "400":
          description: "Invalid Slug supplied"
        "404":
          description: "Product not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /admin/products:
    post:
      tags:
      - "products"
      summary: "Add a new product to the store"
      description: ""
      operationId: "storeProduct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/product"
          
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "products"
      summary: "Find all products"
      description: "Returns all product"
      operationId: "getAllProducts"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all products"
        required: true
        schema:
          $ref: "#/definitions/product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "products not found"
      security:
      - api_key: []
  /products:
    get:
      tags:
      - "products"
      summary: "Find all products with filters and pagination"
      description: "Returns all product  with filters and pagination"
      operationId: "getAllProductsfiltered"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all products"
        required: true
        schema:
          $ref: "#/definitions/product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "products not found"
      security:
      - api_key: []
  /products/latest:
    get:
      tags:
      - "products"
      summary: "Find latest products"
      description: "Returns latest products"
      operationId: "getLatestProducts"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get latest products"
        required: true
        schema:
          $ref: "#/definitions/product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "products not found"
      security:
      - api_key: []
  /products/{productSlug}:
    get:
      tags:
      - "products"
      summary: "Find product by slug"
      description: "Returns a single product"
      operationId: "getProductBySlug"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "productSlug"
        in: "path"
        description: "Slug of product to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "product not found"
      security:
      - api_key: []
  #Tags
  /admin/tags/{tagSlug}:
    put:
      tags:
      - "tags"
      summary: "Update an existing tag"
      description: ""
      operationId: "updateTag"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      parameters:
      - name: "tagSlug"
        in: "path"
        description: "Slug of tag to update"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Category not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "tags"
      summary: "Deletes a tag"
      description: ""
      operationId: "deleteTag"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tagSlug"
        in: "path"
        description: "Slug of tag to delete"
        required: true
        type: "string"

      responses:
        "400":
          description: "Invalid Slug supplied"
        "404":
          description: "Category not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /admin/tags:
    post:
      tags:
      - "tags"
      summary: "Add a new tag to the store"
      description: ""
      operationId: "storeTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tag object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Tag"
          
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /tags:
    get:
      tags:
      - "tags"
      summary: "Find all tags"
      description: "Returns all tags"
      operationId: "getAllTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all tags"
        required: true
        schema:
          $ref: "#/definitions/Tag"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "categories not found"
      security:
      - api_key: []
   #Categories
  /admin/categories/{categorySlug}:
    put:
      tags:
      - "categories"
      summary: "Update an existing category"
      description: ""
      operationId: "updateCategory"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      parameters:
      - name: "categorySlug"
        in: "path"
        description: "Slug of category to update"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Category not found"
        "405":
          description: "Validation exception"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "categories"
      summary: "Deletes a category"
      description: ""
      operationId: "deleteCategory"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categorySlug"
        in: "path"
        description: "Slug of category to delete"
        required: true
        type: "string"

      responses:
        "400":
          description: "Invalid Slug supplied"
        "404":
          description: "Category not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /admin/categories:
    post:
      tags:
      - "categories"
      summary: "Add a new category to the store"
      description: ""
      operationId: "storeCategory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Category object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Category"
          
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "categories"
      summary: "Find all categories"
      description: "Returns all categories"
      operationId: "getAllCategories"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all categories"
        required: true
        schema:
          $ref: "#/definitions/product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "categories not found"
      security:
      - api_key: []
    
  /categories:
    get:
      tags:
      - "categories"
      summary: "Find main categories"
      description: "Returns main categories"
      operationId: "getMainCategories"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get main categories"
        required: true
        schema:
          $ref: "#/definitions/product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "categories not found"
      security:
      - api_key: []
  /categories/navbar:
    get:
      tags:
      - "categories"
      summary: "Find navbar categories"
      description: "Returns navbar categories"
      operationId: "getNavbarCategories"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get navbar categories"
        required: true
        schema:
          $ref: "#/definitions/product"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "categories not found"
      security:
      - api_key: []
  /categories/{categorySlug}:
    get:
      tags:
      - "categories"
      summary: "Find category by slug"
      description: "Returns a single catgory"
      operationId: "getCategorySlug"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "categorySlug"
        in: "path"
        description: "Slug of category to return"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "category not found"
      security:
      - api_key: []
  #users
  /admin/users:
    get:
      tags:
      - "users"
      summary: "Find all users"
      description: "Returns all users"
      operationId: "getAllUsers"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "get all users"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "users not found"
      security:
      - api_key: []
  /admin/users/create:
    post:
      tags:
      - "users"
      summary: "Add a new admin to the store"
      description: ""
      operationId: "storeAdmin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Admin object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
          
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /admin/users/{userId}/disable:
    put:
      tags:
      - "users"
      summary: "disable a user"
      description: ""
      operationId: "disableUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "disable a user"
        required: true
        type: "string"
          
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /login:
    post:
      tags:
      - "users"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /register:
    post:
      tags:
      - "users"
      summary: "Add a new admin to the store"
      description: ""
      operationId: "storeUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Admin object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/User"
          
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /logout:
    post:
      tags:
      - "users"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /login/status:
    post:
      tags:
      - "users"
      summary: "check login status"
      description: ""
      operationId: "checkLogin"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:

  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  #category model
  Category:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      slug:
        type: "string"
      details:
        type: "string"
      products:
        type: "array"
        xml:
          name: "product"
          wrapped: true
        items:
          $ref: "#/definitions/product"  
      subCategories:
        type: "array"
        xml:
          name: "subCategory"
          wrapped: true
        items:
          $ref: "#/definitions/Category"  
      
    xml:
      name: "Category"
  #user model
  User:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      enabled:
        type: "boolean"
      role:
        type: "string"
    xml:
      name: "User"
  #tag model
  Tag:
    type: "object"
    properties:
      _id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      slug:
        type: "string"
      products:
        type: "array"
        xml:
          name: "product"
          wrapped: true
        items:
          $ref: "#/definitions/product"
    xml:
      name: "Tag"
  #product model
  product:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      _id:
        type: "object"
      name:
        type: "string"
        example: "skirt"
      description:
        type: "string"
        example: "product description"
      price:
        type: "number"
        example: "2.50"
      inStock:
        type: "boolean"
        example: "true"
      slug:
        type: "string"
        example: "skirt"
      quantity:
        type: "integer"
        example: "2"
      category:
        $ref: "#/definitions/Category"
     
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
    xml:
      name: "products"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"